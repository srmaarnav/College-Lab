# # -*- coding: utf-8 -*-
# """NeuralNetwork Perseptron.ipynb

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/1nnL2bY7lPd4mo7HnJ8-jRoXHqElhik8i
# """

# import numpy as np

# class NeuralNetwork():

#     def __init__(self):
#         # Seed the random number generator
#         np.random.seed(1)

#         # Set synaptic weights to a 3x1 matrix,
#         # with values from -1 to 1 and mean 0
#         self.synaptic_weights = 2 * np.random.random((3, 1)) - 1   # converted the range of 0 to 1 to -1 to 1

#     def sigmoid(self, x):
#         """
#         Takes in weighted sum of the inputs and normalizes
#         them through between 0 and 1 through a sigmoid function
#         """
#         return 1 / (1 + np.exp(-x))

#     def sigmoid_derivative(self, x):
#         """
#         The derivative of the sigmoid function used to
#         calculate necessary weight adjustments
#         """
#         return x * (1 - x)

#     def train(self, training_inputs, training_outputs, training_iterations):
#         """
#         We train the model through trial and error, adjusting the
#         synaptic weights each time to get a better result
#         """
#         for iteration in range(training_iterations):
#             # Pass training set through the neural network
#             output = self.think(training_inputs)

#             # Calculate the error rate
#             error = training_outputs - output

#             # Multiply error by input and gradient of the sigmoid function
#             # Less confident weights are adjusted more through the nature of the function
#             adjustments = np.dot(training_inputs.T, error * self.sigmoid_derivative(output))

#             # Adjust synaptic weights
#             self.synaptic_weights += adjustments

#     def think(self, inputs):
#         """
#         Pass inputs through the neural network to get output
#         """

#         inputs = inputs.astype(float)
#         output = self.sigmoid(np.dot(inputs, self.synaptic_weights))
#         return output


# if __name__ == "__main__":

#     # Initialize the single neuron neural network
#     neural_network = NeuralNetwork()

#     print("Random starting synaptic weights: ")
#     print(neural_network.synaptic_weights)

#     # The training set, with 4 examples consisting of 3
#     # input values and 1 output value
#     training_inputs = np.array([[0,0,1],
#                                 [1,1,1],
#                                 [1,0,1],
#                                 [0,1,1]])

#     training_outputs = np.array([[0,1,1,0]]).T

#     # Train the neural network
#     neural_network.train(training_inputs, training_outputs, 10)

#     print("Synaptic weights after training: ")
#     print(neural_network.synaptic_weights)
    
    


import numpy as np

class NeuralNetwork():

    def __init__(self):
        np.random.seed(1)

        self.synaptic_weights = 2 * np.random.random((3, 1)) - 1   # converted the range of 0 to 1 to -1 to 1

    def sigmoid(self, x):
        
        return 1 / (1 + np.exp(-x))

    def sigmoid_derivative(self, x):
        
        return x * (1 - x)

    def train(self, training_inputs, training_outputs, training_iterations):
        
        for iteration in range(training_iterations):
            output = self.think(training_inputs)

            error = training_outputs - output

            adjustments = np.dot(training_inputs.T, error * self.sigmoid_derivative(output))

            self.synaptic_weights += adjustments

    def think(self, inputs):
        inputs = inputs.astype(float)
        output = self.sigmoid(np.dot(inputs, self.synaptic_weights))
        return output


if __name__ == "__main__":

    neural_network = NeuralNetwork()

    print("Random starting synaptic weights: ")
    print(neural_network.synaptic_weights)

    training_inputs = np.array([[1,1,1],
                                [1,0,1],
                                [0,1,1],
                                [1,1,0]])

    training_outputs = np.array([[0,1,1,0]]).T

    neural_network.train(training_inputs, training_outputs, 10)

    print("Synaptic weights after training: ")
    print(neural_network.synaptic_weights)